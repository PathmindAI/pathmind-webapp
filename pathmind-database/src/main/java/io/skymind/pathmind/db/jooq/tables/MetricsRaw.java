/*
 * This file is generated by jOOQ.
 */
package io.skymind.pathmind.db.jooq.tables;


import io.skymind.pathmind.db.jooq.Indexes;
import io.skymind.pathmind.db.jooq.Keys;
import io.skymind.pathmind.db.jooq.Public;
import io.skymind.pathmind.db.jooq.tables.records.MetricsRawRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MetricsRaw extends TableImpl<MetricsRawRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.metrics_raw</code>
     */
    public static final MetricsRaw METRICS_RAW = new MetricsRaw();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetricsRawRecord> getRecordType() {
        return MetricsRawRecord.class;
    }

    /**
     * The column <code>public.metrics_raw.policy_id</code>.
     */
    public final TableField<MetricsRawRecord, Long> POLICY_ID = createField(DSL.name("policy_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.metrics_raw.iteration</code>.
     */
    public final TableField<MetricsRawRecord, Integer> ITERATION = createField(DSL.name("iteration"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.metrics_raw.episode</code>.
     */
    public final TableField<MetricsRawRecord, Integer> EPISODE = createField(DSL.name("episode"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.metrics_raw.index</code>.
     */
    public final TableField<MetricsRawRecord, Integer> INDEX = createField(DSL.name("index"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.metrics_raw.value</code>.
     */
    public final TableField<MetricsRawRecord, BigDecimal> VALUE = createField(DSL.name("value"), SQLDataType.NUMERIC(32, 17), this, "");

    /**
     * The column <code>public.metrics_raw.agent</code>.
     */
    public final TableField<MetricsRawRecord, Integer> AGENT = createField(DSL.name("agent"), SQLDataType.INTEGER.defaultValue(DSL.field("0", SQLDataType.INTEGER)), this, "");

    private MetricsRaw(Name alias, Table<MetricsRawRecord> aliased) {
        this(alias, aliased, null);
    }

    private MetricsRaw(Name alias, Table<MetricsRawRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.metrics_raw</code> table reference
     */
    public MetricsRaw(String alias) {
        this(DSL.name(alias), METRICS_RAW);
    }

    /**
     * Create an aliased <code>public.metrics_raw</code> table reference
     */
    public MetricsRaw(Name alias) {
        this(alias, METRICS_RAW);
    }

    /**
     * Create a <code>public.metrics_raw</code> table reference
     */
    public MetricsRaw() {
        this(DSL.name("metrics_raw"), null);
    }

    public <O extends Record> MetricsRaw(Table<O> child, ForeignKey<O, MetricsRawRecord> key) {
        super(child, key, METRICS_RAW);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.METRICS_RAW_POLICY_ID_INDEX);
    }

    @Override
    public List<ForeignKey<MetricsRawRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MetricsRawRecord, ?>>asList(Keys.METRICS_RAW__PM_FK_METRICS_RAW_POLICY);
    }

    private transient Policy _policy;

    public Policy policy() {
        if (_policy == null)
            _policy = new Policy(this, Keys.METRICS_RAW__PM_FK_METRICS_RAW_POLICY);

        return _policy;
    }

    @Override
    public MetricsRaw as(String alias) {
        return new MetricsRaw(DSL.name(alias), this);
    }

    @Override
    public MetricsRaw as(Name alias) {
        return new MetricsRaw(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MetricsRaw rename(String name) {
        return new MetricsRaw(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MetricsRaw rename(Name name) {
        return new MetricsRaw(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Long, Integer, Integer, Integer, BigDecimal, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
