/*
 * This file is generated by jOOQ.
 */
package io.skymind.pathmind.db.jooq.tables;


import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import io.skymind.pathmind.db.jooq.Indexes;
import io.skymind.pathmind.db.jooq.Keys;
import io.skymind.pathmind.db.jooq.Public;
import io.skymind.pathmind.db.jooq.tables.records.MetricsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.4"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class Metrics extends TableImpl<MetricsRecord> {

    private static final long serialVersionUID = -932013717;

    /**
     * The reference instance of <code>public.metrics</code>
     */
    public static final Metrics METRICS = new Metrics();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MetricsRecord> getRecordType() {
        return MetricsRecord.class;
    }

    /**
     * The column <code>public.metrics.policy_id</code>.
     */
    public final TableField<MetricsRecord, Long> POLICY_ID = createField(DSL.name("policy_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.metrics.index</code>.
     */
    public final TableField<MetricsRecord, Integer> INDEX = createField(DSL.name("index"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.metrics.min</code>.
     */
    public final TableField<MetricsRecord, BigDecimal> MIN = createField(DSL.name("min"), org.jooq.impl.SQLDataType.NUMERIC(32, 17), this, "");

    /**
     * The column <code>public.metrics.mean</code>.
     */
    public final TableField<MetricsRecord, BigDecimal> MEAN = createField(DSL.name("mean"), org.jooq.impl.SQLDataType.NUMERIC(32, 17), this, "");

    /**
     * The column <code>public.metrics.max</code>.
     */
    public final TableField<MetricsRecord, BigDecimal> MAX = createField(DSL.name("max"), org.jooq.impl.SQLDataType.NUMERIC(32, 17), this, "");

    /**
     * The column <code>public.metrics.iteration</code>.
     */
    public final TableField<MetricsRecord, Integer> ITERATION = createField(DSL.name("iteration"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.metrics.agent</code>.
     */
    public final TableField<MetricsRecord, Integer> AGENT = createField(DSL.name("agent"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.metrics</code> table reference
     */
    public Metrics() {
        this(DSL.name("metrics"), null);
    }

    /**
     * Create an aliased <code>public.metrics</code> table reference
     */
    public Metrics(String alias) {
        this(DSL.name(alias), METRICS);
    }

    /**
     * Create an aliased <code>public.metrics</code> table reference
     */
    public Metrics(Name alias) {
        this(alias, METRICS);
    }

    private Metrics(Name alias, Table<MetricsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Metrics(Name alias, Table<MetricsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Metrics(Table<O> child, ForeignKey<O, MetricsRecord> key) {
        super(child, key, METRICS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.METRICS_POLICY_ID_INDEX);
    }

    @Override
    public List<ForeignKey<MetricsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MetricsRecord, ?>>asList(Keys.METRICS__PM_FK_METRICS_POLICY);
    }

    public Policy policy() {
        return new Policy(this, Keys.METRICS__PM_FK_METRICS_POLICY);
    }

    @Override
    public Metrics as(String alias) {
        return new Metrics(DSL.name(alias), this);
    }

    @Override
    public Metrics as(Name alias) {
        return new Metrics(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Metrics rename(String name) {
        return new Metrics(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Metrics rename(Name name) {
        return new Metrics(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Integer, BigDecimal, BigDecimal, BigDecimal, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
