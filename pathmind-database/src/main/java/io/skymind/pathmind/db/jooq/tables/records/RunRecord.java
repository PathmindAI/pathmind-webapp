/*
 * This file is generated by jOOQ.
 */
package io.skymind.pathmind.db.jooq.tables.records;


import io.skymind.pathmind.db.jooq.tables.Run;
import io.skymind.pathmind.shared.services.PolicyServerService.DeploymentStatus;

import java.time.LocalDateTime;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record16;
import org.jooq.Row16;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RunRecord extends UpdatableRecordImpl<RunRecord> implements Record16<Long, Long, String, Integer, LocalDateTime, LocalDateTime, Integer, LocalDateTime, Long, String, String, LocalDateTime, String, String, Integer, DeploymentStatus> {

    private static final long serialVersionUID = -1251906010;

    /**
     * Setter for <code>public.run.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.run.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.run.experiment_id</code>.
     */
    public void setExperimentId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.run.experiment_id</code>.
     */
    public Long getExperimentId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.run.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.run.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.run.run_type</code>.
     */
    public void setRunType(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.run.run_type</code>.
     */
    public Integer getRunType() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>public.run.started_at</code>.
     */
    public void setStartedAt(LocalDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.run.started_at</code>.
     */
    public LocalDateTime getStartedAt() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.run.stopped_at</code>.
     */
    public void setStoppedAt(LocalDateTime value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.run.stopped_at</code>.
     */
    public LocalDateTime getStoppedAt() {
        return (LocalDateTime) get(5);
    }

    /**
     * Setter for <code>public.run.status</code>.
     */
    public void setStatus(Integer value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.run.status</code>.
     */
    public Integer getStatus() {
        return (Integer) get(6);
    }

    /**
     * Setter for <code>public.run.notification_sent_at</code>.
     */
    public void setNotificationSentAt(LocalDateTime value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.run.notification_sent_at</code>.
     */
    public LocalDateTime getNotificationSentAt() {
        return (LocalDateTime) get(7);
    }

    /**
     * Setter for <code>public.run.training_error_id</code>.
     */
    public void setTrainingErrorId(Long value) {
        set(8, value);
    }

    /**
     * Getter for <code>public.run.training_error_id</code>.
     */
    public Long getTrainingErrorId() {
        return (Long) get(8);
    }

    /**
     * Setter for <code>public.run.job_id</code>.
     */
    public void setJobId(String value) {
        set(9, value);
    }

    /**
     * Getter for <code>public.run.job_id</code>.
     */
    public String getJobId() {
        return (String) get(9);
    }

    /**
     * Setter for <code>public.run.rllib_error</code>.
     */
    public void setRllibError(String value) {
        set(10, value);
    }

    /**
     * Getter for <code>public.run.rllib_error</code>.
     */
    public String getRllibError() {
        return (String) get(10);
    }

    /**
     * Setter for <code>public.run.ec2_created_at</code>.
     */
    public void setEc2CreatedAt(LocalDateTime value) {
        set(11, value);
    }

    /**
     * Getter for <code>public.run.ec2_created_at</code>.
     */
    public LocalDateTime getEc2CreatedAt() {
        return (LocalDateTime) get(11);
    }

    /**
     * Setter for <code>public.run.success_message</code>.
     */
    public void setSuccessMessage(String value) {
        set(12, value);
    }

    /**
     * Getter for <code>public.run.success_message</code>.
     */
    public String getSuccessMessage() {
        return (String) get(12);
    }

    /**
     * Setter for <code>public.run.warning_message</code>.
     */
    public void setWarningMessage(String value) {
        set(13, value);
    }

    /**
     * Getter for <code>public.run.warning_message</code>.
     */
    public String getWarningMessage() {
        return (String) get(13);
    }

    /**
     * Setter for <code>public.run.completing_updates_attempts</code>.
     */
    public void setCompletingUpdatesAttempts(Integer value) {
        set(14, value);
    }

    /**
     * Getter for <code>public.run.completing_updates_attempts</code>.
     */
    public Integer getCompletingUpdatesAttempts() {
        return (Integer) get(14);
    }

    /**
     * Setter for <code>public.run.policy_server_status</code>.
     */
    public void setPolicyServerStatus(DeploymentStatus value) {
        set(15, value);
    }

    /**
     * Getter for <code>public.run.policy_server_status</code>.
     */
    public DeploymentStatus getPolicyServerStatus() {
        return (DeploymentStatus) get(15);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record16 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row16<Long, Long, String, Integer, LocalDateTime, LocalDateTime, Integer, LocalDateTime, Long, String, String, LocalDateTime, String, String, Integer, DeploymentStatus> fieldsRow() {
        return (Row16) super.fieldsRow();
    }

    @Override
    public Row16<Long, Long, String, Integer, LocalDateTime, LocalDateTime, Integer, LocalDateTime, Long, String, String, LocalDateTime, String, String, Integer, DeploymentStatus> valuesRow() {
        return (Row16) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Run.RUN.ID;
    }

    @Override
    public Field<Long> field2() {
        return Run.RUN.EXPERIMENT_ID;
    }

    @Override
    public Field<String> field3() {
        return Run.RUN.NAME;
    }

    @Override
    public Field<Integer> field4() {
        return Run.RUN.RUN_TYPE;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Run.RUN.STARTED_AT;
    }

    @Override
    public Field<LocalDateTime> field6() {
        return Run.RUN.STOPPED_AT;
    }

    @Override
    public Field<Integer> field7() {
        return Run.RUN.STATUS;
    }

    @Override
    public Field<LocalDateTime> field8() {
        return Run.RUN.NOTIFICATION_SENT_AT;
    }

    @Override
    public Field<Long> field9() {
        return Run.RUN.TRAINING_ERROR_ID;
    }

    @Override
    public Field<String> field10() {
        return Run.RUN.JOB_ID;
    }

    @Override
    public Field<String> field11() {
        return Run.RUN.RLLIB_ERROR;
    }

    @Override
    public Field<LocalDateTime> field12() {
        return Run.RUN.EC2_CREATED_AT;
    }

    @Override
    public Field<String> field13() {
        return Run.RUN.SUCCESS_MESSAGE;
    }

    @Override
    public Field<String> field14() {
        return Run.RUN.WARNING_MESSAGE;
    }

    @Override
    public Field<Integer> field15() {
        return Run.RUN.COMPLETING_UPDATES_ATTEMPTS;
    }

    @Override
    public Field<DeploymentStatus> field16() {
        return Run.RUN.POLICY_SERVER_STATUS;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getExperimentId();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public Integer component4() {
        return getRunType();
    }

    @Override
    public LocalDateTime component5() {
        return getStartedAt();
    }

    @Override
    public LocalDateTime component6() {
        return getStoppedAt();
    }

    @Override
    public Integer component7() {
        return getStatus();
    }

    @Override
    public LocalDateTime component8() {
        return getNotificationSentAt();
    }

    @Override
    public Long component9() {
        return getTrainingErrorId();
    }

    @Override
    public String component10() {
        return getJobId();
    }

    @Override
    public String component11() {
        return getRllibError();
    }

    @Override
    public LocalDateTime component12() {
        return getEc2CreatedAt();
    }

    @Override
    public String component13() {
        return getSuccessMessage();
    }

    @Override
    public String component14() {
        return getWarningMessage();
    }

    @Override
    public Integer component15() {
        return getCompletingUpdatesAttempts();
    }

    @Override
    public DeploymentStatus component16() {
        return getPolicyServerStatus();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getExperimentId();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public Integer value4() {
        return getRunType();
    }

    @Override
    public LocalDateTime value5() {
        return getStartedAt();
    }

    @Override
    public LocalDateTime value6() {
        return getStoppedAt();
    }

    @Override
    public Integer value7() {
        return getStatus();
    }

    @Override
    public LocalDateTime value8() {
        return getNotificationSentAt();
    }

    @Override
    public Long value9() {
        return getTrainingErrorId();
    }

    @Override
    public String value10() {
        return getJobId();
    }

    @Override
    public String value11() {
        return getRllibError();
    }

    @Override
    public LocalDateTime value12() {
        return getEc2CreatedAt();
    }

    @Override
    public String value13() {
        return getSuccessMessage();
    }

    @Override
    public String value14() {
        return getWarningMessage();
    }

    @Override
    public Integer value15() {
        return getCompletingUpdatesAttempts();
    }

    @Override
    public DeploymentStatus value16() {
        return getPolicyServerStatus();
    }

    @Override
    public RunRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public RunRecord value2(Long value) {
        setExperimentId(value);
        return this;
    }

    @Override
    public RunRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public RunRecord value4(Integer value) {
        setRunType(value);
        return this;
    }

    @Override
    public RunRecord value5(LocalDateTime value) {
        setStartedAt(value);
        return this;
    }

    @Override
    public RunRecord value6(LocalDateTime value) {
        setStoppedAt(value);
        return this;
    }

    @Override
    public RunRecord value7(Integer value) {
        setStatus(value);
        return this;
    }

    @Override
    public RunRecord value8(LocalDateTime value) {
        setNotificationSentAt(value);
        return this;
    }

    @Override
    public RunRecord value9(Long value) {
        setTrainingErrorId(value);
        return this;
    }

    @Override
    public RunRecord value10(String value) {
        setJobId(value);
        return this;
    }

    @Override
    public RunRecord value11(String value) {
        setRllibError(value);
        return this;
    }

    @Override
    public RunRecord value12(LocalDateTime value) {
        setEc2CreatedAt(value);
        return this;
    }

    @Override
    public RunRecord value13(String value) {
        setSuccessMessage(value);
        return this;
    }

    @Override
    public RunRecord value14(String value) {
        setWarningMessage(value);
        return this;
    }

    @Override
    public RunRecord value15(Integer value) {
        setCompletingUpdatesAttempts(value);
        return this;
    }

    @Override
    public RunRecord value16(DeploymentStatus value) {
        setPolicyServerStatus(value);
        return this;
    }

    @Override
    public RunRecord values(Long value1, Long value2, String value3, Integer value4, LocalDateTime value5, LocalDateTime value6, Integer value7, LocalDateTime value8, Long value9, String value10, String value11, LocalDateTime value12, String value13, String value14, Integer value15, DeploymentStatus value16) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        value15(value15);
        value16(value16);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached RunRecord
     */
    public RunRecord() {
        super(Run.RUN);
    }

    /**
     * Create a detached, initialised RunRecord
     */
    public RunRecord(Long id, Long experimentId, String name, Integer runType, LocalDateTime startedAt, LocalDateTime stoppedAt, Integer status, LocalDateTime notificationSentAt, Long trainingErrorId, String jobId, String rllibError, LocalDateTime ec2CreatedAt, String successMessage, String warningMessage, Integer completingUpdatesAttempts, DeploymentStatus policyServerStatus) {
        super(Run.RUN);

        set(0, id);
        set(1, experimentId);
        set(2, name);
        set(3, runType);
        set(4, startedAt);
        set(5, stoppedAt);
        set(6, status);
        set(7, notificationSentAt);
        set(8, trainingErrorId);
        set(9, jobId);
        set(10, rllibError);
        set(11, ec2CreatedAt);
        set(12, successMessage);
        set(13, warningMessage);
        set(14, completingUpdatesAttempts);
        set(15, policyServerStatus);
    }
}
