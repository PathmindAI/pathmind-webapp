/*
 * This file is generated by jOOQ.
 */
package io.skymind.pathmind.db.jooq.tables.records;


import javax.annotation.processing.Generated;

import io.skymind.pathmind.db.jooq.tables.ExperimentObservation;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.4"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ExperimentObservationRecord extends UpdatableRecordImpl<ExperimentObservationRecord> implements Record2<Long, Long> {

    private static final long serialVersionUID = -198232227;

    /**
     * Setter for <code>public.experiment_observation.experiment_id</code>.
     */
    public void setExperimentId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.experiment_observation.experiment_id</code>.
     */
    public Long getExperimentId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.experiment_observation.observation_id</code>.
     */
    public void setObservationId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.experiment_observation.observation_id</code>.
     */
    public Long getObservationId() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record2<Long, Long> key() {
        return (Record2) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Long, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ExperimentObservation.EXPERIMENT_OBSERVATION.EXPERIMENT_ID;
    }

    @Override
    public Field<Long> field2() {
        return ExperimentObservation.EXPERIMENT_OBSERVATION.OBSERVATION_ID;
    }

    @Override
    public Long component1() {
        return getExperimentId();
    }

    @Override
    public Long component2() {
        return getObservationId();
    }

    @Override
    public Long value1() {
        return getExperimentId();
    }

    @Override
    public Long value2() {
        return getObservationId();
    }

    @Override
    public ExperimentObservationRecord value1(Long value) {
        setExperimentId(value);
        return this;
    }

    @Override
    public ExperimentObservationRecord value2(Long value) {
        setObservationId(value);
        return this;
    }

    @Override
    public ExperimentObservationRecord values(Long value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExperimentObservationRecord
     */
    public ExperimentObservationRecord() {
        super(ExperimentObservation.EXPERIMENT_OBSERVATION);
    }

    /**
     * Create a detached, initialised ExperimentObservationRecord
     */
    public ExperimentObservationRecord(Long experimentId, Long observationId) {
        super(ExperimentObservation.EXPERIMENT_OBSERVATION);

        set(0, experimentId);
        set(1, observationId);
    }
}
