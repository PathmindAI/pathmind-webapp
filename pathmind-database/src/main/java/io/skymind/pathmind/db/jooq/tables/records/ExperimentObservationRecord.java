/*
 * This file is generated by jOOQ.
 */
package io.skymind.pathmind.db.jooq.tables.records;


import io.skymind.pathmind.db.jooq.tables.ExperimentObservation;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExperimentObservationRecord extends UpdatableRecordImpl<ExperimentObservationRecord> implements Record3<Long, Long, Long> {

    private static final long serialVersionUID = 915579635;

    /**
     * Setter for <code>public.experiment_observation.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.experiment_observation.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.experiment_observation.experiment_id</code>.
     */
    public void setExperimentId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.experiment_observation.experiment_id</code>.
     */
    public Long getExperimentId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.experiment_observation.observation_id</code>.
     */
    public void setObservationId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.experiment_observation.observation_id</code>.
     */
    public Long getObservationId() {
        return (Long) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Long, Long> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return ExperimentObservation.EXPERIMENT_OBSERVATION.ID;
    }

    @Override
    public Field<Long> field2() {
        return ExperimentObservation.EXPERIMENT_OBSERVATION.EXPERIMENT_ID;
    }

    @Override
    public Field<Long> field3() {
        return ExperimentObservation.EXPERIMENT_OBSERVATION.OBSERVATION_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getExperimentId();
    }

    @Override
    public Long component3() {
        return getObservationId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getExperimentId();
    }

    @Override
    public Long value3() {
        return getObservationId();
    }

    @Override
    public ExperimentObservationRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ExperimentObservationRecord value2(Long value) {
        setExperimentId(value);
        return this;
    }

    @Override
    public ExperimentObservationRecord value3(Long value) {
        setObservationId(value);
        return this;
    }

    @Override
    public ExperimentObservationRecord values(Long value1, Long value2, Long value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ExperimentObservationRecord
     */
    public ExperimentObservationRecord() {
        super(ExperimentObservation.EXPERIMENT_OBSERVATION);
    }

    /**
     * Create a detached, initialised ExperimentObservationRecord
     */
    public ExperimentObservationRecord(Long id, Long experimentId, Long observationId) {
        super(ExperimentObservation.EXPERIMENT_OBSERVATION);

        set(0, id);
        set(1, experimentId);
        set(2, observationId);
    }
}
