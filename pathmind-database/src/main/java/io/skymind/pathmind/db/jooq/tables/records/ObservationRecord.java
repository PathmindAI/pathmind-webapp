/*
 * This file is generated by jOOQ.
 */
package io.skymind.pathmind.db.jooq.tables.records;


import io.skymind.pathmind.db.jooq.tables.Observation;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ObservationRecord extends UpdatableRecordImpl<ObservationRecord> implements Record8<Long, Long, String, String, String, String, Double, Double> {

    private static final long serialVersionUID = 466723334;

    /**
     * Setter for <code>public.observation.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.observation.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.observation.model_id</code>.
     */
    public void setModelId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.observation.model_id</code>.
     */
    public Long getModelId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.observation.variable</code>.
     */
    public void setVariable(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.observation.variable</code>.
     */
    public String getVariable() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.observation.data_type</code>.
     */
    public void setDataType(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.observation.data_type</code>.
     */
    public String getDataType() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.observation.description</code>.
     */
    public void setDescription(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.observation.description</code>.
     */
    public String getDescription() {
        return (String) get(4);
    }

    /**
     * Setter for <code>public.observation.example</code>.
     */
    public void setExample(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.observation.example</code>.
     */
    public String getExample() {
        return (String) get(5);
    }

    /**
     * Setter for <code>public.observation.min</code>.
     */
    public void setMin(Double value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.observation.min</code>.
     */
    public Double getMin() {
        return (Double) get(6);
    }

    /**
     * Setter for <code>public.observation.max</code>.
     */
    public void setMax(Double value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.observation.max</code>.
     */
    public Double getMax() {
        return (Double) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, String, String, String, String, Double, Double> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Long, String, String, String, String, Double, Double> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Observation.OBSERVATION.ID;
    }

    @Override
    public Field<Long> field2() {
        return Observation.OBSERVATION.MODEL_ID;
    }

    @Override
    public Field<String> field3() {
        return Observation.OBSERVATION.VARIABLE;
    }

    @Override
    public Field<String> field4() {
        return Observation.OBSERVATION.DATA_TYPE;
    }

    @Override
    public Field<String> field5() {
        return Observation.OBSERVATION.DESCRIPTION;
    }

    @Override
    public Field<String> field6() {
        return Observation.OBSERVATION.EXAMPLE;
    }

    @Override
    public Field<Double> field7() {
        return Observation.OBSERVATION.MIN;
    }

    @Override
    public Field<Double> field8() {
        return Observation.OBSERVATION.MAX;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getModelId();
    }

    @Override
    public String component3() {
        return getVariable();
    }

    @Override
    public String component4() {
        return getDataType();
    }

    @Override
    public String component5() {
        return getDescription();
    }

    @Override
    public String component6() {
        return getExample();
    }

    @Override
    public Double component7() {
        return getMin();
    }

    @Override
    public Double component8() {
        return getMax();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getModelId();
    }

    @Override
    public String value3() {
        return getVariable();
    }

    @Override
    public String value4() {
        return getDataType();
    }

    @Override
    public String value5() {
        return getDescription();
    }

    @Override
    public String value6() {
        return getExample();
    }

    @Override
    public Double value7() {
        return getMin();
    }

    @Override
    public Double value8() {
        return getMax();
    }

    @Override
    public ObservationRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public ObservationRecord value2(Long value) {
        setModelId(value);
        return this;
    }

    @Override
    public ObservationRecord value3(String value) {
        setVariable(value);
        return this;
    }

    @Override
    public ObservationRecord value4(String value) {
        setDataType(value);
        return this;
    }

    @Override
    public ObservationRecord value5(String value) {
        setDescription(value);
        return this;
    }

    @Override
    public ObservationRecord value6(String value) {
        setExample(value);
        return this;
    }

    @Override
    public ObservationRecord value7(Double value) {
        setMin(value);
        return this;
    }

    @Override
    public ObservationRecord value8(Double value) {
        setMax(value);
        return this;
    }

    @Override
    public ObservationRecord values(Long value1, Long value2, String value3, String value4, String value5, String value6, Double value7, Double value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ObservationRecord
     */
    public ObservationRecord() {
        super(Observation.OBSERVATION);
    }

    /**
     * Create a detached, initialised ObservationRecord
     */
    public ObservationRecord(Long id, Long modelId, String variable, String dataType, String description, String example, Double min, Double max) {
        super(Observation.OBSERVATION);

        set(0, id);
        set(1, modelId);
        set(2, variable);
        set(3, dataType);
        set(4, description);
        set(5, example);
        set(6, min);
        set(7, max);
    }
}
