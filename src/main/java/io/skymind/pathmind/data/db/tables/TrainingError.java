/*
 * This file is generated by jOOQ.
 */
package io.skymind.pathmind.data.db.tables;


import io.skymind.pathmind.data.db.Indexes;
import io.skymind.pathmind.data.db.Keys;
import io.skymind.pathmind.data.db.Public;
import io.skymind.pathmind.data.db.tables.records.TrainingErrorRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrainingError extends TableImpl<TrainingErrorRecord> {

    private static final long serialVersionUID = 664465572;

    /**
     * The reference instance of <code>public.training_error</code>
     */
    public static final TrainingError TRAINING_ERROR = new TrainingError();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrainingErrorRecord> getRecordType() {
        return TrainingErrorRecord.class;
    }

    /**
     * The column <code>public.training_error.id</code>.
     */
    public final TableField<TrainingErrorRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.training_error.keyword</code>.
     */
    public final TableField<TrainingErrorRecord, String> KEYWORD = createField(DSL.name("keyword"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.training_error.description</code>.
     */
    public final TableField<TrainingErrorRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>public.training_error.restartable</code>.
     */
    public final TableField<TrainingErrorRecord, Boolean> RESTARTABLE = createField(DSL.name("restartable"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.training_error</code> table reference
     */
    public TrainingError() {
        this(DSL.name("training_error"), null);
    }

    /**
     * Create an aliased <code>public.training_error</code> table reference
     */
    public TrainingError(String alias) {
        this(DSL.name(alias), TRAINING_ERROR);
    }

    /**
     * Create an aliased <code>public.training_error</code> table reference
     */
    public TrainingError(Name alias) {
        this(alias, TRAINING_ERROR);
    }

    private TrainingError(Name alias, Table<TrainingErrorRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrainingError(Name alias, Table<TrainingErrorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TrainingError(Table<O> child, ForeignKey<O, TrainingErrorRecord> key) {
        super(child, key, TRAINING_ERROR);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TRAINING_ERROR_PKEY);
    }

    @Override
    public UniqueKey<TrainingErrorRecord> getPrimaryKey() {
        return Keys.TRAINING_ERROR_PKEY;
    }

    @Override
    public List<UniqueKey<TrainingErrorRecord>> getKeys() {
        return Arrays.<UniqueKey<TrainingErrorRecord>>asList(Keys.TRAINING_ERROR_PKEY);
    }

    @Override
    public TrainingError as(String alias) {
        return new TrainingError(DSL.name(alias), this);
    }

    @Override
    public TrainingError as(Name alias) {
        return new TrainingError(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingError rename(String name) {
        return new TrainingError(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrainingError rename(Name name) {
        return new TrainingError(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Boolean> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
