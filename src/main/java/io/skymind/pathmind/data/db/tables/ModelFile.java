/*
 * This file is generated by jOOQ.
 */
package io.skymind.pathmind.data.db.tables;


import io.skymind.pathmind.data.db.Indexes;
import io.skymind.pathmind.data.db.Keys;
import io.skymind.pathmind.data.db.Public;
import io.skymind.pathmind.data.db.tables.records.ModelFileRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ModelFile extends TableImpl<ModelFileRecord> {

    private static final long serialVersionUID = 2055192515;

    /**
     * The reference instance of <code>public.model_file</code>
     */
    public static final ModelFile MODEL_FILE = new ModelFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ModelFileRecord> getRecordType() {
        return ModelFileRecord.class;
    }

    /**
     * The column <code>public.model_file.model_id</code>.
     */
    public final TableField<ModelFileRecord, Long> MODEL_ID = createField(DSL.name("model_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.model_file.file</code>.
     */
    public final TableField<ModelFileRecord, byte[]> FILE = createField(DSL.name("file"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>public.model_file</code> table reference
     */
    public ModelFile() {
        this(DSL.name("model_file"), null);
    }

    /**
     * Create an aliased <code>public.model_file</code> table reference
     */
    public ModelFile(String alias) {
        this(DSL.name(alias), MODEL_FILE);
    }

    /**
     * Create an aliased <code>public.model_file</code> table reference
     */
    public ModelFile(Name alias) {
        this(alias, MODEL_FILE);
    }

    private ModelFile(Name alias, Table<ModelFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private ModelFile(Name alias, Table<ModelFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ModelFile(Table<O> child, ForeignKey<O, ModelFileRecord> key) {
        super(child, key, MODEL_FILE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MODEL_FILE_MODEL_ID_INDEX);
    }

    @Override
    public List<ForeignKey<ModelFileRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ModelFileRecord, ?>>asList(Keys.MODEL_FILE__PM_FK_MODEL_FILE_MODEL);
    }

    public Model model() {
        return new Model(this, Keys.MODEL_FILE__PM_FK_MODEL_FILE_MODEL);
    }

    @Override
    public ModelFile as(String alias) {
        return new ModelFile(DSL.name(alias), this);
    }

    @Override
    public ModelFile as(Name alias) {
        return new ModelFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelFile rename(String name) {
        return new ModelFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ModelFile rename(Name name) {
        return new ModelFile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
