/*
 * This file is generated by jOOQ.
 */
package io.skymind.pathmind.data.db.tables;


import io.skymind.pathmind.data.db.Indexes;
import io.skymind.pathmind.data.db.Keys;
import io.skymind.pathmind.data.db.Public;
import io.skymind.pathmind.data.db.tables.records.PolicyFileRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PolicyFile extends TableImpl<PolicyFileRecord> {

    private static final long serialVersionUID = 686436886;

    /**
     * The reference instance of <code>public.policy_file</code>
     */
    public static final PolicyFile POLICY_FILE = new PolicyFile();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PolicyFileRecord> getRecordType() {
        return PolicyFileRecord.class;
    }

    /**
     * The column <code>public.policy_file.policy_id</code>.
     */
    public final TableField<PolicyFileRecord, Long> POLICY_ID = createField(DSL.name("policy_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.policy_file.file</code>.
     */
    public final TableField<PolicyFileRecord, byte[]> FILE = createField(DSL.name("file"), org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>public.policy_file</code> table reference
     */
    public PolicyFile() {
        this(DSL.name("policy_file"), null);
    }

    /**
     * Create an aliased <code>public.policy_file</code> table reference
     */
    public PolicyFile(String alias) {
        this(DSL.name(alias), POLICY_FILE);
    }

    /**
     * Create an aliased <code>public.policy_file</code> table reference
     */
    public PolicyFile(Name alias) {
        this(alias, POLICY_FILE);
    }

    private PolicyFile(Name alias, Table<PolicyFileRecord> aliased) {
        this(alias, aliased, null);
    }

    private PolicyFile(Name alias, Table<PolicyFileRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PolicyFile(Table<O> child, ForeignKey<O, PolicyFileRecord> key) {
        super(child, key, POLICY_FILE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.POLICY_FILE_POLICY_ID_INDEX, Indexes.POLICY_FILE_UNIQUE_POLICY_ID);
    }

    @Override
    public List<UniqueKey<PolicyFileRecord>> getKeys() {
        return Arrays.<UniqueKey<PolicyFileRecord>>asList(Keys.POLICY_FILE_UNIQUE_POLICY_ID);
    }

    @Override
    public List<ForeignKey<PolicyFileRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PolicyFileRecord, ?>>asList(Keys.POLICY_FILE__PM_FK_POLICY_FILE_POLICY);
    }

    public Policy policy() {
        return new Policy(this, Keys.POLICY_FILE__PM_FK_POLICY_FILE_POLICY);
    }

    @Override
    public PolicyFile as(String alias) {
        return new PolicyFile(DSL.name(alias), this);
    }

    @Override
    public PolicyFile as(Name alias) {
        return new PolicyFile(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyFile rename(String name) {
        return new PolicyFile(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PolicyFile rename(Name name) {
        return new PolicyFile(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, byte[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
