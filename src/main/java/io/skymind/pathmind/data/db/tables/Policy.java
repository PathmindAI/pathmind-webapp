/*
 * This file is generated by jOOQ.
 */
package io.skymind.pathmind.data.db.tables;


import io.skymind.pathmind.data.db.Indexes;
import io.skymind.pathmind.data.db.Keys;
import io.skymind.pathmind.data.db.Public;
import io.skymind.pathmind.data.db.tables.records.PolicyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Policy extends TableImpl<PolicyRecord> {

    private static final long serialVersionUID = -2037691920;

    /**
     * The reference instance of <code>public.policy</code>
     */
    public static final Policy POLICY = new Policy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PolicyRecord> getRecordType() {
        return PolicyRecord.class;
    }

    /**
     * The column <code>public.policy.id</code>.
     */
    public final TableField<PolicyRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.policy.run_id</code>.
     */
    public final TableField<PolicyRecord, Long> RUN_ID = createField("run_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.policy.name</code>.
     */
    public final TableField<PolicyRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.policy.algorithm</code>.
     */
    public final TableField<PolicyRecord, Integer> ALGORITHM = createField("algorithm", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("1", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<PolicyRecord, Object> SCORE = createField("score", org.jooq.impl.SQLDataType.OTHER, this, "");

    /**
     * The column <code>public.policy.hyper_parameters</code>.
     */
    public final TableField<PolicyRecord, byte[]> HYPER_PARAMETERS = createField("hyper_parameters", org.jooq.impl.SQLDataType.BLOB, this, "");

    /**
     * Create a <code>public.policy</code> table reference
     */
    public Policy() {
        this(DSL.name("policy"), null);
    }

    /**
     * Create an aliased <code>public.policy</code> table reference
     */
    public Policy(String alias) {
        this(DSL.name(alias), POLICY);
    }

    /**
     * Create an aliased <code>public.policy</code> table reference
     */
    public Policy(Name alias) {
        this(alias, POLICY);
    }

    private Policy(Name alias, Table<PolicyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Policy(Name alias, Table<PolicyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Policy(Table<O> child, ForeignKey<O, PolicyRecord> key) {
        super(child, key, POLICY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.POLICY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PolicyRecord> getPrimaryKey() {
        return Keys.POLICY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PolicyRecord>> getKeys() {
        return Arrays.<UniqueKey<PolicyRecord>>asList(Keys.POLICY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<PolicyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PolicyRecord, ?>>asList(Keys.POLICY__PM_FK_POLICY_RUN);
    }

    public Run run() {
        return new Run(this, Keys.POLICY__PM_FK_POLICY_RUN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Policy as(String alias) {
        return new Policy(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Policy as(Name alias) {
        return new Policy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Policy rename(String name) {
        return new Policy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Policy rename(Name name) {
        return new Policy(name, null);
    }
}
