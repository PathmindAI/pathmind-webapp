/*
 * This file is generated by jOOQ.
 */
package io.skymind.pathmind.data.db.tables;


import io.skymind.pathmind.data.db.Indexes;
import io.skymind.pathmind.data.db.Keys;
import io.skymind.pathmind.data.db.Public;
import io.skymind.pathmind.data.db.tables.records.GuideRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Guide extends TableImpl<GuideRecord> {

    private static final long serialVersionUID = -1927101603;

    /**
     * The reference instance of <code>public.guide</code>
     */
    public static final Guide GUIDE = new Guide();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GuideRecord> getRecordType() {
        return GuideRecord.class;
    }

    /**
     * The column <code>public.guide.project_id</code>.
     */
    public final TableField<GuideRecord, Long> PROJECT_ID = createField(DSL.name("project_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.guide.step</code>.
     */
    public final TableField<GuideRecord, Integer> STEP = createField(DSL.name("step"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>public.guide</code> table reference
     */
    public Guide() {
        this(DSL.name("guide"), null);
    }

    /**
     * Create an aliased <code>public.guide</code> table reference
     */
    public Guide(String alias) {
        this(DSL.name(alias), GUIDE);
    }

    /**
     * Create an aliased <code>public.guide</code> table reference
     */
    public Guide(Name alias) {
        this(alias, GUIDE);
    }

    private Guide(Name alias, Table<GuideRecord> aliased) {
        this(alias, aliased, null);
    }

    private Guide(Name alias, Table<GuideRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Guide(Table<O> child, ForeignKey<O, GuideRecord> key) {
        super(child, key, GUIDE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GUIDE_PROJECT_FK_INDEX);
    }

    @Override
    public List<ForeignKey<GuideRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GuideRecord, ?>>asList(Keys.GUIDE__PM_FK_MODEL_PROJECT);
    }

    public Project project() {
        return new Project(this, Keys.GUIDE__PM_FK_MODEL_PROJECT);
    }

    @Override
    public Guide as(String alias) {
        return new Guide(DSL.name(alias), this);
    }

    @Override
    public Guide as(Name alias) {
        return new Guide(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Guide rename(String name) {
        return new Guide(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Guide rename(Name name) {
        return new Guide(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
