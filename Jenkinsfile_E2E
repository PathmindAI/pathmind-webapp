import groovy.json.JsonOutput

def RELEASE_ID
def TEST_STATUS = 0
def prName

/*
Send slack notification
*/
def notifySlack(text, channel, attachments) {
    def slackURL = 'https://hooks.slack.com/services/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'
    def jenkinsIcon = 'https://jenkins.io/images/logos/actor/actor.png'
    
    def payload = JsonOutput.toJson([text       : text,
        channel    : channel,
        username   : "Jenkins Test_PRs Build #${env.BUILD_NUMBER}",
        icon_url   : jenkinsIcon,
        link_names : 1,
        attachments: attachments
    ])
    
    sh "curl -X POST --data-urlencode \'payload=${payload}\' ${slackURL}"
}

/*
Flaky tests
*/
def flakyTests() {
    sh """
        ls -1 ${WORKSPACE}/pathmind-bdd-tests/target/site/serenity/SERENITY-JUNIT*xml | xargs -I {} /usr/bin/xml2json.py -t xml2json {} -o {}.json
        mkdir -p ${WORKSPACE}/pathmind-bdd-tests/target/site/serenity/out
        /usr/bin/flaky.py --input ${WORKSPACE}/pathmind-bdd-tests/target/site/serenity/
        cd ${WORKSPACE}/pathmind-bdd-tests/target/site/serenity/out
        ls -1 SERENITY-JUNIT*xml.json | xargs -I {} /usr/bin/xml2json.py {} -t json2xml -o {}.xml
        ls -1 SERENITY-JUNIT*xml.json.xml | xargs -I {} sh -c 'mv {} `echo {} | sed "s@.json.xml@@g"`'
    """
}

/*
This is the main pipeline section with the stages of the CI/CD
*/
pipeline {
    options {
        // Build auto timeout
        timeout(time: 1440, unit: 'MINUTES')
        buildDiscarder(logRotator(daysToKeepStr: '15', artifactDaysToKeepStr: '15'))
    }

    parameters {
        string(name: 'GIT_BRANCH', defaultValue: 'dev', description: 'Git branch to build')
    }
    
    //all is built and run from the master
    agent {
        node {
            label 'master'
            customWorkspace "${env.BUILD_NUMBER}"
        }
    }
    
    // Pipeline stages
    stages {
        stage('Initialize') {
            steps {
                buildDescription "#${ghprbPullId} - ${env.ghprbPullTitle}"
            }
        }
        
        stage('Testing') {
            when {
                allOf{
                    expression { env.GIT_BRANCH != 'prod' }
                    expression { env.GIT_BRANCH != 'dev' }
                    expression { env.GIT_BRANCH != 'test' }
                }
            }
            steps {
                script {
                    try {
                            echo "Running E2E tests"
                            sh "rm -rf pathmind-bdd-tests/target/"
                            TEST_STATUS = sh(returnStatus: true, script: "mvn clean verify -Dheadless=true -Denvironments.default.base.url=https://dev.devpathmind.com/ -Dpostgresql.host=pathmind-dev.ccp9x0eboop7.us-east-1.rds.amazonaws.com -Dpostgresql.port=5432 -Dpostgresql.db=pathminddb -Dpostgresql.username=pathminddb -Dpostgresql.password=`kubectl get secret dburlcli  -o=jsonpath='{.data.DB_URL_CLI}' -n dev | base64 --decode | rev | cut -f1 -d'=' | rev | tr -d '\n'`-Dhttp.keepAlive=false -Dwebdriver.driver=remote -Dwebdriver.remote.url=http://selenium-hub:4444/wd/hub -Dwebdriver.remote.driver=chrome -DforkNumber=6 -Dfailsafe.rerunFailingTestsCount=3 -Dapi.url=https://api.devpathmind.com/ -Dpathmind.api.key=`kubectl get secret apipassword -o=jsonpath='{.data.APIPASSWORD}' -n ${env.ghprbTargetBranch} |  base64 --decode` -Dtags=e2e -f pom.xml -P bdd-tests")
                            publishHTML(target: [
                                reportDir: 'pathmind-bdd-tests/target/site/serenity',
                                reportFiles: 'index.html',
                                reportName: "E2E",
                                keepAll: true,
                                alwaysLinkToLastBuild: true,
                                allowMissing: false
                            ])
                            flakyTests()
                            junit 'pathmind-bdd-tests/target/site/serenity/out/SERENITY-JUNIT*xml'
                    } catch (err) {
                    }
                }
            }
        }

        stage('Set pipeline status') {
            when {
                allOf{
                    expression { env.GIT_BRANCH == 'dev' }
                }
            }
            steps {
                script {
                    if (TEST_STATUS != 0) {
                        echo "Some bdd tests failed ${TEST_STATUS}"
                        currentBuild.result = 'UNSTABLE'
                        prName="${env.ghprbPullTitle}".replaceAll('\'', '').replaceAll('"', '')
                    }
                }
            }
        } 
    }
    post {
        unstable {
            echo 'Send slack notification if build unstable'
            script {
                notifySlack("", "#tests", [[
                    title      : "Test_E2E Â» Build #${env.BUILD_NUMBER} - Failed",
                    title_link : "${env.BUILD_URL}",
                    color      : "#CF0000",
                    "mrkdwn_in": ["fields"],
                    fields     : [
                        [
                            value: "<${env.BUILD_URL}Tests|Tests report>\nPull request <${env.ghprbPullLink}|${prName}>",
                            short: false
                        ]
                    ]
                ],])
            }
        }
    }
}
