import groovy.json.JsonOutput

def RELEASE_ID
def TEST_STATUS = 0
def prName

/*
pathmind-webapp pipeline
The pipeline is made up of following steps
1. Git clone and setup
2. Build and local tests
3. Publish Docker and Helm
4. Optionally deploy to production and test
*/

/*
Build a docker image
*/
def buildDockerImage(image_name) {
    echo "Building the pathmind Docker Image"
    sh "docker build -t base -f ${WORKSPACE}/Dockerfile-cache ${WORKSPACE}/"
    sh "docker build -t ${image_name} -f ${WORKSPACE}/Dockerfile ${WORKSPACE}/"
}

/*
Build a docker image
*/
def createSecrets() {
    sh """
    set +x
    kubectl create secret generic dburl --from-literal DB_URL='jdbc:postgresql://postgres/pathminddb?user=pathminddb&password=Asdf1234' -n ${env.BUILD_NUMBER}
    kubectl create secret generic awsaccesskey --from-literal AWS_ACCESS_KEY_ID=${env.AWS_ACCESS_KEY_ID} -n ${env.BUILD_NUMBER}
    kubectl create secret generic awssecretaccesskey --from-literal AWS_SECRET_ACCESS_KEY=${env.AWS_SECRET_ACCESS_KEY} -n ${env.BUILD_NUMBER}
    kubectl create secret generic segmentwebsitekey --from-literal SEGMENT_WEBSITE_KEY=${env.SEGMENT_WEBSITE_KEY} -n ${env.BUILD_NUMBER}
    kubectl create secret generic segmentserversitekey --from-literal SEGMENT_SERVER_KEY=${env.SEGMENT_SERVER_KEY} -n ${env.BUILD_NUMBER}
    """
}

/*
run migrations
*/
def runMigrations() {
    sh """
    cd ${WORKSPACE}
    mvn clean install
    set +x
    export DB_URL='jdbc:postgresql://postgres.${env.BUILD_NUMBER}/pathminddb?user=pathminddb&password=Asdf1234'
    cd ${WORKSPACE}/pathmind-database && mvn liquibase:update
    """
}


/*
Publish a docker image
*/
def publishDockerImage(image_name, DOCKER_TAG) {
    echo "Logging to aws ecr"
    sh "aws ecr get-login --no-include-email --region us-east-1 | sh"
    echo "Creating ECR ${image_name}"
    sh "aws ecr create-repository --repository-name ${image_name}"
    echo "Tagging and pushing the pathmind Docker Image"
    sh "docker tag ${image_name} ${DOCKER_REG}/${image_name}:${DOCKER_TAG}"
    sh "docker push ${DOCKER_REG}/${image_name}:${DOCKER_TAG}"
}

/*
Delete docker image
*/
def deleteDockerImage(image_name) {
    echo "Logging to aws ecr"
    sh "aws ecr get-login --no-include-email --region us-east-1 | sh"
    echo "Deleting ECR ${image_name}"
    sh "aws ecr delete-repository --repository-name ${image_name} --force"
}

/*
Send slack notification
*/
def notifySlack(text, channel, attachments) {
    def slackURL = 'https://hooks.slack.com/services/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'
    def jenkinsIcon = 'https://jenkins.io/images/logos/actor/actor.png'
    
    def payload = JsonOutput.toJson([text       : text,
        channel    : channel,
        username   : "Jenkins E2E Test Build #${env.BUILD_NUMBER}",
        icon_url   : jenkinsIcon,
        link_names : 1,
        attachments: attachments
    ])
    
    sh "curl -X POST --data-urlencode \'payload=${payload}\' ${slackURL}"
}

/*
Flaky tests
*/
def flakyTests() {
    sh """
        ls -1 ${WORKSPACE}/pathmind-bdd-tests/target/site/serenity/SERENITY-JUNIT*xml | xargs -I {} /usr/bin/xml2json.py -t xml2json {} -o {}.json
        mkdir -p ${WORKSPACE}/pathmind-bdd-tests/target/site/serenity/out
        /usr/bin/flaky.py --input ${WORKSPACE}/pathmind-bdd-tests/target/site/serenity/
        cd ${WORKSPACE}/pathmind-bdd-tests/target/site/serenity/out
        ls -1 SERENITY-JUNIT*xml.json | xargs -I {} /usr/bin/xml2json.py {} -t json2xml -o {}.xml
        ls -1 SERENITY-JUNIT*xml.json.xml | xargs -I {} sh -c 'mv {} `echo {} | sed "s@.json.xml@@g"`'
    """
}

/*
Create PG dump
*/
def createPgDump() {
    // Get db url ans pass
    branch="dev"
    dbpass = sh(returnStdout: true, script: "kubectl get secret dburlcli  -o=jsonpath='{.data.DB_URL_CLI}' -n \"${branch}\" | base64 --decode | rev | cut -f1 -d'=' | rev | tr -d '\n'")
    dburl = sh(returnStdout: true, script: "kubectl get secret dburlcli  -o=jsonpath='{.data.DB_URL_CLI}' -n \"${branch}\" | base64 --decode | sed 's@ *password=.*@@g' | sed 's@ @ --@g'")
    sh """
        set -x
        export PGPASSWORD="${dbpass}"
        /usr/lib/postgresql/11/bin/pg_dump -C -w --format=c --blobs --${dburl} > /tmp/dev_dump_${env.BUILD_NUMBER}.sql
    """
}

/*
Load PG dump
*/
def loadPgDump() {
    // Get db url
    dburl = "--host=postgres.${env.BUILD_NUMBER} --port=5432 --dbname=pathminddb --user=pathminddb"
    sh """
        set -x
        PGPASSWORD='Asdf1234' /usr/lib/postgresql/11/bin/pg_restore ${dburl} < /tmp/dev_dump_${env.BUILD_NUMBER}.sql || echo 0
    """
}

/*
This is the main pipeline section with the stages of the CI/CD
*/
pipeline {
    options {
        // Build auto timeout
        timeout(time: 1440, unit: 'MINUTES')
        buildDiscarder(logRotator(daysToKeepStr: '15', artifactDaysToKeepStr: '15'))
    }

    // Some global default variables
    environment {
        IMAGE_NAME = 'pathmind'
        DOCKER_REG = "839270835622.dkr.ecr.us-east-1.amazonaws.com"
        HELM_FILE = "values_dev.yaml"
        HELM_FILE_UPDATER = "values_dev-updater.yaml"
        HELM_FILE_PUNCTUATOR = "values_dev-punctuator.yaml"
        DEPLOY_PROD = false
    }

    //all is built and run from the master
    agent {
        node {
            label 'master'
            customWorkspace "${env.BUILD_NUMBER}"
        }
    }

    // Pipeline stages
    stages {
        stage('Git clone and setup') {
            when {
                allOf{
                    expression { env.GIT_BRANCH == 'dev' }
                }
            }
            steps {
                echo "Check out code"
                checkout scm
                script {
                    // Define a unique name for the tests container and helm release
                    RELEASE_ID = "${IMAGE_NAME}-${env.BUILD_NUMBER}"
                    echo "Global pathmind Id set to ${RELEASE_ID}"
                }
            }
        }

        stage('Build Docker Images') {
            when {
                allOf{
                    expression { env.GIT_BRANCH == 'dev' }
                }
            }
            parallel {
                stage('Build pathmind image') {
                    steps {
                        buildDockerImage("${RELEASE_ID}")
                    }
                }
            }
        }

        stage('Publish Docker Images') {
            when {
                allOf{
                    expression { env.GIT_BRANCH == 'dev' }
                }
            }
            parallel {
                stage('Publish pathmind image') {
                    steps {
                        publishDockerImage("${RELEASE_ID}", "latest")
                    }
                }
            }
        }

        stage('Deploying helm chart') {
            when {
                allOf{
                    expression { env.GIT_BRANCH == 'dev' }
                }
            }
            steps {
                script {
                    echo "Creating name space ${env.BUILD_NUMBER}"
                    sh "kubectl create namespace ${env.BUILD_NUMBER}"
                    echo "Creating selenium hub"
		    sh "helm install selenium-hub ${WORKSPACE}/infra/helm/selenium-hub -n ${env.BUILD_NUMBER} --set namespace=${env.BUILD_NUMBER}"
		    sh "helm install selenium-node ${WORKSPACE}/infra/helm/selenium-node -n ${env.BUILD_NUMBER}"
                    echo "Installing postgresql postgres-${env.BUILD_NUMBER}"
                    sh "helm upgrade --install postgres ${WORKSPACE}/infra/helm/postgres --set namespace=${env.BUILD_NUMBER} -n ${env.BUILD_NUMBER}"
                    echo "Waiting for psql to come up"
                    sh "timeout 900 bash -c 'while ! pg_isready  -h postgres-${env.BUILD_NUMBER} -q; do sleep 5; done'"
                }
                //Create a dump from dev
                createPgDump()
                //Load Dev Dump
                loadPgDump()
                createSecrets()
                script {
                    echo "Creating updater resources"
                    sh "aws sqs create-queue --queue-name ${env.BUILD_ID}-updater-queue --attributes \"{\\\"MessageRetentionPeriod\\\":\\\"60\\\"}\""
                    sh "cat /tmp/sqs_policy.json | sed \"s/BUILD_ID/${env.BUILD_NUMBER}/g\" > /tmp/${env.BUILD_NUMBER}-sqs_policy.json"
                    sh "aws sqs set-queue-attributes --queue-url https://sqs.us-east-1.amazonaws.com/839270835622/${env.BUILD_NUMBER}-updater-queue --attributes file:///tmp/${env.BUILD_NUMBER}-sqs_policy.json"
                    sh "rm /tmp/${env.BUILD_NUMBER}-sqs_policy.json"
                    sh "aws sns subscribe --topic-arn arn:aws:sns:us-east-1:839270835622:dev-updater-topic --protocol sqs --notification-endpoint arn:aws:sqs:us-east-1:839270835622:${env.BUILD_ID}-updater-queue --attributes \"{\\\"RawMessageDelivery\\\":\\\"true\\\"}\""
                    
                    echo "Creating punctuator resources"
                    sh "aws sqs create-queue --queue-name ${env.BUILD_ID}-punctuator-queue --attributes \"{\\\"MessageRetentionPeriod\\\":\\\"60\\\"}\""
                    echo "Creating S3 bucket for tests"
                    sh "aws s3api create-bucket --bucket ${env.BUILD_ID}-training-dynamic-files.pathmind.com --region us-east-1"
                    echo "Running db migrations"
                }
                runMigrations()
                script {
                    echo "Installing ${RELEASE_ID}"
                    sh "helm upgrade --install ${RELEASE_ID} ${WORKSPACE}/infra/helm/pathmind -f ${WORKSPACE}/infra/helm/pathmind/${HELM_FILE} --set image.repository=${DOCKER_REG}/${RELEASE_ID} --set image.tag=latest --set env.APPLICATION_URL=http://${RELEASE_ID} --set namespace=${env.BUILD_NUMBER} --set env.SQS_UPDATER_URL=https://sqs.us-east-1.amazonaws.com/839270835622/${env.BUILD_ID}-updater-queue --set env.S3_BUCKET=${env.BUILD_ID}-training-dynamic-files.pathmind.com --set env.SNS_UPDATER_SQS_FILTER_ATTR=${env.BUILD_NUMBER}prtest -n ${env.BUILD_NUMBER}"
                    echo "Waiting for webapp to come up"
                    sh "timeout 300 bash -c 'while ! curl http://${RELEASE_ID}; do sleep 5; done'"
                    echo "Installing updater ${RELEASE_ID}"
                    sh "helm upgrade --install ${RELEASE_ID}-updater ${WORKSPACE}/infra/helm/pathmind -f ${WORKSPACE}/infra/helm/pathmind/${HELM_FILE_UPDATER} --set image.repository=${DOCKER_REG}/${RELEASE_ID} --set image.tag=latest --set env.APPLICATION_URL=http://${RELEASE_ID} --set namespace=${env.BUILD_NUMBER} --set env.JOB_MOCK_CYCLE=3 --set env.JOB_MOCK_MAX_MIN=5 --set env.SQS_UPDATER_URL=https://sqs.us-east-1.amazonaws.com/839270835622/${env.BUILD_ID}-updater-queue --set env.S3_BUCKET=${env.BUILD_ID}-training-dynamic-files.pathmind.com --set env.SNS_UPDATER_SQS_FILTER_ATTR=${env.BUILD_NUMBER}prtest -n ${env.BUILD_NUMBER}"
                    echo "Installing punctuator ${RELEASE_ID}"
                    sh "helm upgrade --install ${RELEASE_ID}-punctuator ${WORKSPACE}/infra/helm/pathmind -f ${WORKSPACE}/infra/helm/pathmind/${HELM_FILE_PUNCTUATOR} --set image.repository=${DOCKER_REG}/${RELEASE_ID} --set image.tag=latest --set env.APPLICATION_URL=http://${RELEASE_ID} --set namespace=${env.BUILD_NUMBER} --set env.JOB_MOCK_CYCLE=3 --set env.JOB_MOCK_MAX_MIN=5 --set env.SQS_UPDATER_PUNCTUATOR_QUEUE=https://sqs.us-east-1.amazonaws.com/839270835622/${env.BUILD_ID}-punctuator-queue --set env.S3_BUCKET=${env.BUILD_ID}-training-dynamic-files.pathmind.com --set env.SNS_UPDATER_SQS_FILTER_ATTR=${env.BUILD_NUMBER}prtest --set env.SQS_UPDATER_URL=https://sqs.us-east-1.amazonaws.com/839270835622/${env.BUILD_ID}-updater-queue -n ${env.BUILD_NUMBER}"
                    sh "sleep 30"

                }
            }
        }

        stage('Testing') {
            when {
                allOf{
                    expression { env.GIT_BRANCH == 'dev' }
                }
            }
            steps {
                script {
                    try {
                        echo "Running E2E tests"
                        sh "rm -rf pathmind-bdd-tests/target/"
			TEST_STATUS = sh(returnStatus: true, script: "mvn clean verify -Dheadless=true -Denvironments.default.base.url=http://pathmind/ -Dpostgresql.host=postgres -Dpostgresql.port=5432 -Dpostgresql.db=pathminddb -Dpostgresql.username=pathminddb -Dpostgresql.password=Asdf1234 -Dhttp.keepAlive=false -Dwebdriver.driver=remote -Dwebdriver.remote.url=http://selenium-hub.${env.BUILD_NUMBER}.svc.cluster.local:4444/wd/hub -Dwebdriver.remote.driver=chrome -DforkNumber=6 -Dfailsafe.rerunFailingTestsCount=3 -Dpathmind.api.key=`kubectl get secret apipassword -o=jsonpath='{.data.APIPASSWORD}' -n dev |  base64 --decode` -Dtags=e2e -f pom.xml -P bdd-tests")
                        publishHTML(target: [
                            reportDir: 'pathmind-bdd-tests/target/site/serenity',
                            reportFiles: 'index.html',
                            reportName: "E2E",
                            keepAll: true,
                            alwaysLinkToLastBuild: true,
                            allowMissing: false
                        ])
                        flakyTests()
                        junit 'pathmind-bdd-tests/target/site/serenity/out/SERENITY-JUNIT*xml'
                    } catch (err) {
                    }
                }
            }
        }
        stage('Set pipeline status') {
            when {
                allOf{
                    expression { env.GIT_BRANCH == 'dev' }
                }
            }
            steps {
                script {
                    if (TEST_STATUS != 0) {
                        echo "Some bdd tests failed ${TEST_STATUS}"
                        currentBuild.result = 'UNSTABLE'
                        prName="${env.ghprbPullTitle}".replaceAll('\'', '').replaceAll('"', '')
                    }
                }
            }
        } 
    }

    post {
        always {
            echo "Deleting image"
            deleteDockerImage("${RELEASE_ID}")
            echo "Deleting name space ${env.BUILD_NUMBER}"
            sh "helm delete postgres -n ${env.BUILD_NUMBER}"
            sh "helm delete ${RELEASE_ID} -n ${env.BUILD_NUMBER}"
            sh "helm delete ${RELEASE_ID}-updater -n ${env.BUILD_NUMBER}"
            sh "helm delete selenium-hub -n ${env.BUILD_NUMBER}"
            sh "helm delete selenium-node -n ${env.BUILD_NUMBER}"
            sh "helm delete ${RELEASE_ID}-punctuator -n ${env.BUILD_NUMBER}"
            sh "kubectl delete namespace ${env.BUILD_NUMBER}"
            sh "aws sqs delete-queue --queue-url https://sqs.us-east-1.amazonaws.com/839270835622/${env.BUILD_NUMBER}-punctuator-queue"
            sh "aws sqs delete-queue --queue-url https://sqs.us-east-1.amazonaws.com/839270835622/${env.BUILD_NUMBER}-updater-queue"
            sh "aws sns unsubscribe --subscription-arn `aws sns list-subscriptions | jq -r \".[] | .[] |  select(.Endpoint ==\\\"arn:aws:sqs:us-east-1:839270835622:${env.BUILD_ID}-updater-queue\\\").SubscriptionArn\"`"
            sh "/usr/bin/clean_test_s3.sh ${env.BUILD_NUMBER}"
        }
        unstable {
            echo 'Send slack notification if build unstable'
            script {
                notifySlack("", "#tests", [[
                    title      : "E2E Tests » Build #${env.BUILD_NUMBER} - Failed",
                    title_link : "${env.BUILD_URL}",
                    color      : "#CF0000",
                    text       : "<@UGH39HL4E>",
                    "mrkdwn_in": ["fields"],
                    fields     : [
                        [
                            value: "<${env.BUILD_URL}Tests|Tests report>\nPull request <${env.ghprbPullLink}|${prName}>",
                            short: false
                        ]
                    ]
                ],])
            }
        }
    }
}
